# interpreter for shell commands
set shell zsh
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'
#set previewer "~/preview.sh"
set previewer "~/projects/lfutils/lfpreviewer"
set cleaner lfcleaner
set preview true
set nohidden
set mouse true
set drawbox true
set icons true
set ignorecase true
set number true
set tabstop 4
set sortby ctime
set info ctime
set reverse true

#set promptfmt ${{/home/omegarogue/.local/bin/powerline-render shell left}}
#format string of the prompt shown in the top line. Special expansions are provided, '%u' as the user name, '%h' as the host name, '%w' as the working  directory,  '%d'  as  the
#       working  directory with a trailing path separator, '%f' as the file name, and '%F' as the current filter. Home folder is shown as '~' in the working directory expansion. Direc‐
#       tory names are automatically shortened to a single character starting from the left most parent when the prompt does not fit to the screen.

cmd on-cd &{{
# display git repository status in your prompt
	source /usr/share/git/completion/git-prompt.sh

	GIT_PS1_SHOWDIRTYSTATE=auto
	GIT_PS1_SHOWSTASHSTATE=auto
	GIT_PS1_SHOWUNTRACKEDFILES=auto
	GIT_PS1_SHOWUPSTREAM=auto
	GIT_PS1_SHOWCOLORHINTS=true
	git=$(__git_ps1 " (%s)") || true
	git=${git//'%f'/'\033[0m'}
	git=${git//'%F{blue}'/'\033[1;34m'}
	git=${git//'%F{green}'/'\033[32m'}
	git=${git//'%F{red}'/'\033[31m'}
	git=${git//'*'/'±'}
	git=${git//'+'/'✚'}
	git=${git//'%%'/'%'}

	git=${git//'<>'/"≢"}
	git=${git//'='/"≡"}
	git=${git//'<'/"↓"}
	git=${git//'>'/"↑"}
	fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f$git\033[0m"
	lf -remote "send $id set promptfmt \"$fmt\""

#}}

cmd paste_try_cow &{{
# # This was very helpful for debugging:
# log_file="$HOME/lf-reflink-log-$(date +'%Y-%m-%d_%H-%M-%S')"
# [ -f "$log_file" ] || touch "$log_file"
# exec 1>> $log_file 2>&1
# set -x

# In theory, this may fail,
# but I tested it on selection with 10k files - everything worked (bash)
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift

	if [ $mode = 'copy' ]; then
# Reflink if all items of selection and the destination are on the
# same mount point and it is CoW fs.
# (to make sure reflink never fails in first place, so we don't have to
# clean up)
		src_targets="$(df --output=target -- "$@" | sed '1d' | sort -u)"
		if [ "$(df --output=target -- "$PWD" | tail -n 1)" = \
			"$(echo "$src_targets" | tail -n 1)" ] && \
			(( "$(echo "$src_targets" | wc -l)" == 1 )) && \
			[[ "$(df --output=fstype -- "$PWD" | tail -n 1)" =~ ^(btrfs|xfs|zfs)$ ]]; then
				echo 'selected copy and cp reflink paste'
				start=$(date '+%s')

# Handle same names in dst
# TODO parallelism, idk - but exit/return/break won't stop the loop from subshell...
				for i in "$@"; do
					name="${i##*/}"
					original="$name"
					count=0
					while [ -w "$PWD/$name" ]; do
						count=$((count+1))
						name="$original.~$count~"
					done

					set +e
					cp_out="$(cp -rn --reflink=always -- "$i" "$PWD/$name" 2>&1)"
					set -e

					if [ ! -z "$cp_out" ]; then
						lf -remote "send $id echoerr $cp_out"
						exit 0
					fi
				done

				finish=$(( $(date '+%s') - $start ))
				t=''
				if (( $finish > 2 )); then
					t="${finish}s"
				fi

# Or just skip a file when names are the same.
# (A LOT faster if you e.g. pasting selection of 10k files)
# cp -rn --reflink=always -- "$@" .

				lf -remote "send clear"

				green=$'\u001b[32m'
				reset=$'\u001b[0m'
				lf -remote "send $id echo ${green}reflinked!${reset} $t"
				else
				echo 'selected copy and lf native paste'
				lf -remote "send $id paste"
			fi

		elif [ $mode = 'move' ]; then
			echo 'selected move and lf native paste'
			lf -remote "send $id paste"
	fi

# # for debug
# set +x

	lf -remote "send load"
}}

cmd link %{{
	set -- $(cat ~/.local/share/lf/files)
		mode="$1"
		shift
		if [ "$#" -lt 1 ]; then
			lf -remote "send $id echo no files to link"
				exit 0
				fi
	case "$mode" in
# symbolically copy mode is indicating a soft link
				copy) ln -sr -t . -- "$@";;
# while a move mode is indicating a hard link
				move) ln -t . -- "$@";;
				esac
					rm ~/.local/share/lf/files
					lf -remote "send clear"
}}

# Custom Functions
cmd open ${{
	case $(file --mime-type "$f" -bL) in
		text/*|application/json) $EDITOR "$f";;
		*)
			 case "$f" in
				*.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
					mntdir="$f-archivemount"
					[ ! -d "$mntdir" ] && {
						mkdir "$mntdir"
						archivemount "$f" "$mntdir"
						echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
					}
					lf -remote "send $id cd \"$mntdir\""
					lf -remote "send $id reload"
					;;
				*)xdg-open "$f" ;;
			 esac

	esac
}}

cmd mkdir ${{
	printf "Directory Name: "
	read ans
	mkdir $ans
}}

cmd mkfile ${{
	printf "File Name: "
	read ans
	$EDITOR $ans
}}

cmd chmod ${{
	printf "Mode Bits: "
	read ans

	for file in "$fx"
	do
	chmod $ans $file
	done

	lf -remote 'send reload'
}}

cmd sudomkfile ${{
	printf "File Name: "
	read ans
	sudo $EDITOR $ans
}}

# cmd setwallpaper %cp "$f" ~/.config/wall.png && xwallpaper --zoom "$f"

cmd fzf_jump ${{
	res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
	if [ -f "$res" ]; then
	cmd="select"
	elif [ -d "$res" ]; then
	cmd="cd"
	fi
	lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
	f=$(mktemp)
	res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
	rm -f "$f"
	if [ -f "$res" ]; then
	cmd="select"
	elif [ -d "$res" ]; then
	cmd="cd"
	fi
	lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rga --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd bookmark_jump ${{
	res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
	lf -remote "send $id cd \"$res\""
}}

cmd bookmark_delete ${{
	res="$(ls $LF_BOOKMARK_PATH | fzf)"
	rm $LF_BOOKMARK_PATH/"$res"
}}


cmd bookmark_create ${{
	read ans
	echo $PWD > $LF_BOOKMARK_PATH/${ans// /_}
}}


cmd dragon %dragon-drop -a -x $fx
cmd dragon-stay %dragon-drop -a $fx
cmd dragon-individual %dragon-drop $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd unarchive ${{
	source $HOME/.dotfiles/zsh/functions.zsh
	unarchive $f && exit 0 || exit 1
}}
cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
	files=$(printf "$fx" | tr '\n' ';')
		while [ "$files" ]; do
# extract the substring from start of string up to delimiter.
# this is the first "element" of the string.
			file=${files%%;*}

	trash-put "$(basename "$file")"
# if there's only one element left, set `files` to an empty string.
# this causes us to exit this `while` loop.
# else, we delete the first "element" of the string from files, and move onto the next.
		if [ "$files" = "$file" ]; then
			files=''
		else
			files="${files#*;}"
				fi
				done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
	trash-restore
}}

cmd stripspace %stripspace "$f"

cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
	for f in $fx; do
		printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
			done
}}

cmd zle-insert-absolute %{{
	for f in $fx; do
		printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
			done
}}

cmd zle-init :{{
	map . zle-cd
		map a zle-insert-relative
		map A zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"



#cmd paste $cp-p --lf-paste $id

# map <delete> delete
# Bindings
# Remove some defaults
map m
map o
# map n
map "'"
map '"'
map d
map c
map e
map f
map t

# File Openers
map ee $$EDITOR "$f"
map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
map dd trash
map tc clear_trash
map tr restore_trash

# Broot Mapping
map f broot_jump

# FZF mapping
#map f fzf_jump

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile

map bc bookmark_create
map bj bookmark_jump
map bd bookmark_delete

map ss stripspace

#put in background
map <c-z> $ kill -STOP $PPID


# Basic Functions
map I set hidden!
map DD delete
map p paste_try_cow
map P :link
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
# map bg setwallpaper
map o open_config
map br $vimv $fx
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement
map gtr cd ~/.local/share/Trash/files
map gus cd /run/media/omegarogue
map gm. cd /mnt
map gmb cd /mnt/butter
map gmc cd /mnt/c
map gmda cd /mnt/omegadata
map gmdr cd /mnt/omegadrive
map gmm cd /mnt/movies
map gmr cd /mnt/rpg_stuff
map gmt cd /mnt/tv_shows

map gv. cd ~/Videos
map gva cd ~/Videos/anime

map gp. cd ~/Pictures
map gps cd ~/Pictures/screenshots

map gd cd ~/Documents

map gDw cd ~/Downloads
map ge cd ~/Desktop

map gr. cd ~/projects
map grs cd ~/src

map gDt cd ~/.dotfiles
map gc cd ~/.config
map gl. cd ~/.local
map gls. cd ~/.local/share
map glsf10 cd ~/.local/share/FoundryVTTv10
map glsf9 cd ~/.local/share/FoundryVTTv9
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share

map \;j cd ~
