# interpreter for shell commands
set shell zsh
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'
set previewer "~/preview.sh"
set preview true
set hidden false
set drawbox true
set icons true
set ignorecase true


# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        *) xdg-open "$f" ;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

# cmd setwallpaper %cp "$f" ~/.config/wall.png && xwallpaper --zoom "$f"

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# cmd broot_jump ${{
#   f=$(mktemp)
#   res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
#   rm -f "$f"
#   if [ -f "$res" ]; then
#     cmd="select"
#   elif [ -d "$res" ]; then
#     cmd="cd"
#   fi
#   lf -remote "send $id $cmd \"$res\""
# }}

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dragon-stay %dragon-drag-and-drop -a $fx
cmd dragon-individual %dragon-drag-and-drop $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd unarchive ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f --one-top-level;;
        *.tar.gz|*.tgz) tar xzvf $f --one-top-level;;
        *.tar.xz|*.txz) tar xJvf $f --one-top-level;;
        *.zip) unzip $f -d ${f//.zip/};;
        *.rar) unrar x $f -d ${f//.rar/};;
        *.7z) 7z x $f -o ${f//.7z/};;
    esac
}}
cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map . zle-cd
    map a zle-insert-relative
    map A zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"


cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dragon-stay %dragon-drag-and-drop -a $fx
cmd dragon-individual %dragon-drag-and-drop $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile


map d

# Basic Functions
map . set hidden!
map DD delete

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile



# map <delete> delete
# Bindings
# Remove some defaults
map m
map o
# map n
map "'"
map '"'
map d
map c
map e
map f
map t

# File Openers
map ee $$EDITOR "$f"
map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
map dd trash
map tc clear_trash
map tr restore_trash

# Broot Mapping
# map f broot_jump

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile

map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
# map bg setwallpaper
map o open_config
map br $vimv $fx
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement
map gtr cd ~/.local/share/Trash/files
map gus cd /run/media/omegarogue
map gmn cd /mnt

map gv. cd ~/Videos

map gp. cd ~/Pictures
map gps cd ~/Pictures/screenshots

map gd cd ~/Documents

map gDw cd ~/Downloads
map ge cd ~/Desktop

map gr. cd ~/projects
map grs cd ~/src

map gDt cd ~/.dotfiles
map gc cd ~/.config
map gl cd ~/.local
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share

map \;j cd ~
