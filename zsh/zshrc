#setopt SOURCE_TRACE
#setopt XTRACE

setopt autocd
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data


# ensure correct PATH zshenv
source $HOME/.zshenv

if [[ $(uname -r) == *WSL* ]]; then
	$HOME/.local/bin/gpg-agent-relay start
fi




function magic-enter-cmd {
	if command git rev-parse --is-inside-work-tree &>/dev/null; then
		echo 'git status -u .'
	else
		echo '[[ $(ls . |wc -l) -le 30 ]] && ls -lh . || ls .'
	fi
}

if (( $+commands[powerline-daemon] )); then
	powerline-daemon -q
fi

source $HOME/.zsh_plugins

# Alias definitions.
if [ -f $HOME/.zsh_aliases ]; then
  source $HOME/.zsh_aliases
fi

if [[ -z $SSH_CONNECTION ]]; then
	gpgconf --launch gpg-agent
fi

[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh


fpath+=${ZDOTDIR:-$HOME}/.zsh_functions

autoload -U compinit
compinit
#eval $(opam env)
complete -o nospace -C /usr/bin/nomad nomad

source $HOME/.local/lib/python3.10/site-packages/powerline/bindings/zsh/powerline.zsh
# Search repos for programs that can't be found
source /usr/share/doc/pkgfile/command-not-found.zsh 2>/dev/null

if (( $+commands[broot] )); then
	source ${XDG_CONFIG_HOME}/broot/launcher/bash/br
fi

_zlf() {
    emulate -L zsh
    local d=$(mktemp -d) || return 1
    {
        mkfifo -m 600 $d/fifo || return 1
		if (( ${+TMUX} )); then
			tmux split -bf zsh -c "exec {ZLE_FIFO}>$d/fifo; export ZLE_FIFO; exec lf" || return 1
		else
			(wezterm cli split-pane -- zsh -c "exec {ZLE_FIFO}>$d/fifo; export ZLE_FIFO; exec lf")>/dev/null || return 1
		fi
        local fd
        exec {fd}<$d/fifo
        zle -Fw $fd _zlf_handler
    } always {
        rm -rf $d
    }
}

_zlf_handler() {
    emulate -L zsh
    local line
    if ! read -r line <&$1; then
        zle -F $1
        exec {1}<&-
        return 1
    fi
    eval $line
    zle -R
}

lfcd () {
    tmp="$(mktemp)"
    fid="$(mktemp)"
    lfrun -command '$printf $id > '"$fid"'' -last-dir-path="$tmp" "$@"
    id="$(cat "$fid")"
    archivemount_dir="/tmp/__lf_archivemount_$id"
    if [ -f "$archivemount_dir" ]; then
        cat "$archivemount_dir" | \
            while read -r line; do
                sudo umount "$line"
                rmdir "$line"
            done
        rm -f "$archivemount_dir"
    fi
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir"
            fi
        fi
    fi
}
function zvm_after_lazy_keybindings() {
  # Here we define the custom widget
  zvm_define_widget _zlf
  zvm_define_widget _zlf_handler
  zvm_define_widget lfcd

  # In normal mode, press Ctrl-E to invoke this widget
  zvm_bindkey vicmd '^E' _zlf

  zvm_bindkey vicmd '^O' lfcd

}


neofetch
#zsh-startify

